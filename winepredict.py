# -*- coding: utf-8 -*-
"""WinePredict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hKVZSzHIInwMl4c0SfTwwfJbSSpZyzkN
"""

!pip install -q git+https://github.com/chris-lawrence-cd/winepredict.git

# Import necessary functions from the library
from winepredict.data_processing import preprocess_and_analyze_data, process_fred_data
from winepredict.model_training import train_and_evaluate_models, tune_and_evaluate_catboost
from winepredict.model_evaluation import evaluate_model, cross_validate_model
from winepredict.visualization import plot_actual_vs_predicted, visualize_residuals, plot_feature_importance
from winepredict import info

import numpy as np
import random
from sklearn.model_selection import train_test_split

# Define FRED API key
api_key = 'db26981c344747951316ccd9c7d01f0d'

# Set seed for reproducibility
seed = 42
np.random.seed(seed)
random.seed(seed)

# Print library information
info()

# Step 1: Download and process FRED data
process_fred_data(api_key)

# Step 2: Preprocess and analyze data
file_path = 'FRED_Data.xlsx'
scaled_df = preprocess_and_analyze_data(file_path, output_file='correlation_matrix.png')

# Step 3: Train and evaluate multiple models
results_df = train_and_evaluate_models(scaled_df)

# Step 4: Tune and evaluate CatBoost model
X = scaled_df.drop(['Average Wine Price'], axis=1)
y = scaled_df['Average Wine Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, shuffle=True, random_state=1)
catboost_results = tune_and_evaluate_catboost(X_train, y_train, X_test, y_test)
best_catboost = catboost_results['best_estimator']

# Plot actual vs. predicted prices for the best model
plot_actual_vs_predicted(y_test, best_catboost.predict(X_test))

# Evaluate the best model on training and testing data
evaluate_model(best_catboost, X_train, X_test, y_train, y_test)

# Visualize residuals
visualize_residuals(y_test, best_catboost.predict(X_test))

# Plot feature importance
plot_feature_importance(catboost_results['ranked_feature_importance'])